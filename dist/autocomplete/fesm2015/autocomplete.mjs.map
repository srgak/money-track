{"version":3,"file":"autocomplete.mjs","sources":["../../../projects/autocomplete/src/lib/autocomplete.service.ts","../../../projects/autocomplete/src/lib/autocomplete.component.ts","../../../projects/autocomplete/src/lib/autocomplete.component.html","../../../projects/autocomplete/src/lib/autocomplete.module.ts","../../../projects/autocomplete/src/public-api.ts","../../../projects/autocomplete/src/autocomplete.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { ElementRef, Injectable } from '@angular/core';\nimport { map, Observable, of, catchError, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AutocompleteService {\n\n  constructor(private http: HttpClient) { }\n\n  public isLoading: boolean;\n  public isError: boolean;\n\n  public getSortedNames(url: string, param: string): Observable<string[]> {\n    \n    if(param.length) {\n      this.isLoading = true;\n      return this.http.get(url)\n        .pipe(\n          catchError(err => throwError(() => err)),\n          map((res: string[]) => res.map(item => item.toLowerCase())),\n          map((data: string[]) => data.filter(item => item.startsWith(param))),\n          map((filtered: string[]) => filtered.map(item => `${item[0].toUpperCase()}${item.substring(1)}`))\n        );\n    } else {\n      return of([]);\n    }\n  }\n}\n","import { Component, forwardRef, Input, OnInit } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BehaviorSubject, debounceTime, map, of, switchMap } from 'rxjs';\nimport { AutocompleteService } from './autocomplete.service';\n\n@Component({\n  selector: 'input-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styles: [],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AutocompleteComponent),\n      multi: true\n    }\n  ]\n})\nexport class AutocompleteComponent implements OnInit, ControlValueAccessor {\n\n  constructor(public data: AutocompleteService) { }\n\n  @Input() public placeholder: string;\n  @Input() public label: string;\n  @Input() public reqLink: string;\n  @Input() public lang: string;\n\n  public startControl: FormControl = new FormControl();\n  private onChange: Function;\n  private onTouch: Function;\n  public list: string[] = [];\n  private saved: string = '';\n\n  public saveValue(value) {\n    this.saved = value;\n    this.list = [];\n  }\n\n  writeValue(value: string): void {\n    this.startControl.setValue(value);\n  }\n  registerOnChange(fn: Function): void {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  ngOnInit(): void {\n    this.startControl.valueChanges\n      .pipe(\n        debounceTime(300),\n        map(val => !val ? '' : val),\n        map(val => val.toLowerCase())\n      )\n      .subscribe(val => {\n        if(this.onChange) {\n          this.onChange(val);\n        }\n        if(val !== this.saved.toLowerCase()) {\n          this.data\n          .getSortedNames(this.reqLink, val)\n          .subscribe({\n            next: val => {\n              this.data.isLoading = false;\n              this.list = val;\n            },\n            error: () => {\n              this.data.isError = true;\n            }\n          });\n        }\n      });\n  }\n}\n","<div class=\"input__field\">\n  <input nz-input\n    [formControl]=\"startControl\"\n    [nzAutocomplete]=\"auto\"\n    [activeInput]=\"placeholder\"\n    mask=\"A*\"\n    [transliteration]=\"lang\">\n  <nz-autocomplete #auto\n    nzOverlayClassName=\"input__dropdown\">\n    <ng-container *ngIf=\"!data.isLoading; else status\">\n      <nz-auto-option *ngFor=\"let item of list;\"\n        [nzValue]=\"item\"\n        (click)=\"saveValue(item)\">{{item}}</nz-auto-option>\n    </ng-container>\n    <ng-template #status>\n      <nz-auto-option nzDisabled>\n        <div *ngIf=\"!data.isError; else error\"\n          class=\"input__status input__status_loading\"></div>\n        <ng-template #error>\n          <div class=\"input__status input__status_error\">Возникла ошибка</div>\n        </ng-template>\n      </nz-auto-option>\n    </ng-template>\n  </nz-autocomplete>\n  <label>{{label}}</label>\n</div>","import { NgModule } from '@angular/core';\nimport { AutocompleteComponent } from './autocomplete.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { RiseInputModule } from 'dist/rise-input';\nimport { TransliterationModule } from 'dist/transliteration';\nimport { NzAutocompleteModule } from 'ng-zorro-antd/auto-complete';\nimport { NzInputModule } from 'ng-zorro-antd/input';\n\n\n@NgModule({\n  declarations: [\n    AutocompleteComponent\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RiseInputModule,\n    TransliterationModule,\n    NzInputModule,\n    NzAutocompleteModule\n  ],\n  exports: [\n    AutocompleteComponent\n  ]\n})\nexport class AutocompleteModule { }\n","/*\n * Public API Surface of autocomplete\n */\n\nexport * from './lib/autocomplete.service';\nexport * from './lib/autocomplete.component';\nexport * from './lib/autocomplete.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}